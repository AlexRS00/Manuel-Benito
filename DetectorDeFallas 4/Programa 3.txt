using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Mail;
using System.Threading;
using System.IO.Ports;

namespace DetectorDeFallas
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            Boton1.Enabled = true; //habilita el boton de abrir puerto
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //busca todos los nombres de puertos disponibles
            foreach (string s in SerialPort.GetPortNames())
            {
                comboBox1.Items.Add(s); //Agrega cada nombre de puerto al comboBox
            }
            ControlBox = false; //Elimina los botones de minimizar, maximizar y cerrar
        }

        private void Boton1_Click(object sender, EventArgs e)
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Close();                //cierra el puerto serial
                label4.Text = "Cerrado";            //cambia el texto
                Boton1.Text = "Abrir puerto";       //cambia el texto
                TimerFailCancel.Enabled = false;             //deshabilita los timers
                TimerSwitchCancel.Enabled = false;
                TimerPassCancel.Enabled = false;
                TimerReporte.Enabled = false;
                TimerLogica.Enabled = false;
                TimerFailFail.Enabled = false;
                TimerSwitchFail.Enabled = false;
                TimerPassFail.Enabled = false;
                BotonDeColor.BackColor = Color.Red; //cambia el color a rojo
            }
            else
            {
                serialPort1.PortName = comboBox1.Text;
                serialPort1.Open();                          //abre el puerto serial
                label4.Text = "Abierto";                     //cambia el texto
                Boton1.Text = "Puerto abierto";              //cambia el texto
                BotonDeColor.BackColor = Color.ForestGreen;  //cambia el color
                TimerLogica.Enabled = true;              //habilita el timer
                Boton1.Enabled = false;            //bloquea el boton de abrir puerto
                comboBox1.Enabled = false;         //bloquea el ComboBox
            }
        }

        //declaración de variables
        string P0, P1, P2, P3, P4, P5;
        double Pass, Fail, Switch, PassControl, FailControl, SwitchControl;
        int FailCount, SwitchCount, PassCount;
        int x;

        //declaracion de variables para correo electronico
        const string usuario = "alex.rosales@uttn.mx";
        const string password = "Alexzael00";
        string txtDe = "alex.rosales@uttn.mx";
        string txtAsunto = "Falla de Tester en Celda 16";
        string txtPara = "alexrosales2k@outlook.com, alex.rosales@uttn.mx";

        private static void EnviarCorreo(StringBuilder Mensaje, DateTime FechaDeEnvio, string De, string Para, string Asunto, out string Error)
        {
            Error = "";
            try
            {

                Mensaje.Append(Environment.NewLine);
                Mensaje.Append(string.Format("Este correo ha sido enviado el día {0:dd/MM/yyyy} a las {0:HH:mm:ss} Hrs: \n\n", FechaDeEnvio));
                Mensaje.Append(Environment.NewLine);
                MailMessage mail = new MailMessage();
                mail.From = new MailAddress(De);
                mail.To.Add(Para);
                mail.Subject = Asunto;
                mail.Body = Mensaje.ToString();
                SmtpClient smtp = new SmtpClient("smtp.outlook.com");
                smtp.Port = 587;
                smtp.UseDefaultCredentials = false;
                smtp.Credentials = new System.Net.NetworkCredential(usuario, password);
                smtp.EnableSsl = true;
                smtp.Send(mail);
                Error = "Correo enviado";
                MessageBox.Show(Error);
            }


            catch (Exception ex)
            {
                Error = "Error: " + ex.Message;
                throw;
                return;
            }
        }

        private void TimerFailCancel_Tick(object sender, EventArgs e)
        {
            //TIMER PARA QUE NO SE ABRAN VARIOS REPORTES DE SOLUCION DEBIDO A LA LAMPARA FAIL
            for (FailCount = 0; FailCount <= 5100; FailCount++)

            {
                if (FailCount >= 5100)
                {
                    TimerFailFail.Enabled = false;
                    TimerFailCancel.Enabled = false;
                }
            }
        }

        private void TimerSwitchCancel_Tick(object sender, EventArgs e)
        {
            //TIMER PARA QUE NO SE CICLE EL REPORTE DE SOLUCION, O SEA, QUE NO SE ABRAN
            //2 O MAS DEBIDO A LA LAMPARA SWITCH
            //cuenta cada segundo
            for (SwitchCount = 0; SwitchCount <= 5100; SwitchCount++)

            {
                if (SwitchCount >= 5100)
                {
                    TimerSwitchFail.Enabled = false;
                    TimerSwitchCancel.Enabled = false;
                }
            }
        }
        private void TimerPassCancel_Tick(object sender, EventArgs e)
        {
            //TIMER QUE HACE QUE NO SE ABRAN VARIOS REPORTES DE SOLUCION DEBIDO A LA LAMPARA
            //PASS
            //cuenta cada segundo
            for (PassCount = 0; PassCount <= 5100; PassCount++)

            {
                if (PassCount >= 5100)
                {
                    TimerPassFail.Enabled = false;
                    TimerPassCancel.Enabled = false;
                }
            }

        }
        private void TimerReporte_Tick(object sender, EventArgs e)
        {
            //ABRE EL REPORTE DE SOLUCION DEBIDO A LA LAMPARA FAIL
            Reporte_de_solución.Form1 p1 = new Reporte_de_solución.Form1();
            p1.Show();

            TimerReporte.Enabled = false;
        }

        private void TimerLogica_Tick(object sender, EventArgs e)
        {
            string ErrorPort;
            try
            {
                //LEE EL VOLTAJE QUE SE ESTA SUMINISTRANDO EN LAS ENTRADAS ANALOGICAS
                //DEL MICROCONTROLADOR, DESDE EL A0 AL A5

                serialPort1.Write("5");
                P0 = serialPort1.ReadLine();
                Pass = 5 * Convert.ToDouble(P0) / 1023;

                serialPort1.Write("4");
                P1 = serialPort1.ReadLine();
                Fail = 5 * Convert.ToDouble(P1) / 1023;

                serialPort1.Write("3");
                P2 = serialPort1.ReadLine();
                Switch = 5 * Convert.ToDouble(P2) / 1023;

                serialPort1.Write("2");
                P3 = serialPort1.ReadLine();
                PassControl = 5 * Convert.ToDouble(P3) / 1023;

                serialPort1.Write("1");
                P4 = serialPort1.ReadLine();
                FailControl = 5 * Convert.ToDouble(P4) / 1023;

                serialPort1.Write("0");
                P5 = serialPort1.ReadLine();
                SwitchControl = 5 * Convert.ToDouble(P5) / 1023;

                label1.Text = Pass.ToString("0.00" + "V");
                label2.Text = Switch.ToString("0.00" + "V");
                label7.Text = Fail.ToString("0.00" + "V");
                label8.Text = PassControl.ToString("0.00" + "V");
                label9.Text = SwitchControl.ToString("0.00" + "V");
                label10.Text = FailControl.ToString("0.00" + "V");

                //DEPENDIENDO DEL RELEVADOR QUE ESTE CONTROLANDO CADA LAMPARA
                //SE SELECCIONARAN DIFERENTES CASOS
                int deteccion = x;

                if (SwitchControl < 1 & PassControl < 1 & FailControl < 1)
                {
                    x = 0;
                }
                if (SwitchControl > 1)
                {
                    x = 1;
                }
                if (PassControl > 1)
                {
                    x = 2;
                }
                if (FailControl > 1)
                {
                    x = 3;
                }
                if (SwitchControl > 1 & PassControl > 1)
                {
                    x = 4;
                }
                if (SwitchControl > 1 & FailControl > 1)
                {
                    x = 5;
                }
                if (PassControl > 1 & FailControl > 1)
                {
                    x = 6;
                }
                if (SwitchControl > 1 & PassControl > 1 & FailControl > 1)
                {
                    x = 7;
                }

                label6.Text = deteccion.ToString(); //MUESTRA EL CASE ACTUAL
                
                //SI EL RELEVADOR QUE CONTROLA A LA LAMPARA, ESTA ENERGIZADO, REALIZA LOS
                //SIGUIENTES CASOS

                switch (deteccion)
                {
                    case 0:
                        //SI NO HAY NINGUN CONTROL ACTIVO, NO HACE NADA
                        TimerFailCancel.Enabled = false;
                        TimerSwitchCancel.Enabled = false;
                        TimerPassCancel.Enabled = false;
                        TimerSwitchFail.Enabled = false;
                        TimerFailFail.Enabled = false;
                        TimerPassFail.Enabled = false;
                        break;

                    case 1: //LAMPARA SWITCH
                        if (Switch > 1)
                        {
                            //NO HAY FALLA
                            TimerSwitchCancel.Enabled = false;
                            TimerSwitchFail.Enabled = false;

                        }
                        if (Switch < 1)
                        {
                            //FALLA
                            TimerSwitchCancel.Enabled = true;
                            TimerSwitchFail.Enabled = true;
                            if (SwitchCount >= 5100)
                            {
                                TimerSwitchCancel.Enabled = false;
                                TimerSwitchFail.Enabled = false;
                            }
                        }
                        break;

                    case 2: //LAMPARA PASS
                        if (Pass > 1)
                        {
                            //NO HAY FALLA
                            TimerPassCancel.Enabled = false;
                            TimerPassFail.Enabled = false;
                        }
                        if (Pass < 1)
                        {
                            //FALLA
                            TimerPassCancel.Enabled = true;
                            TimerPassFail.Enabled = true;
                            if (PassCount >= 5100)
                            {
                                TimerPassCancel.Enabled = false;
                                TimerPassFail.Enabled = false;
                            }
                        }
                        break;

                    case 3: //LAMPARA FAIL
                        if (Fail > 1)
                        {
                            //NO HAY FALLA
                            TimerFailCancel.Enabled = false;
                            TimerFailFail.Enabled = false;
                        }
                        if (Fail < 1)
                        {
                            //FALLA
                            TimerFailCancel.Enabled = true;
                            TimerFailFail.Enabled = true;
                            if (FailCount >= 5100)
                            {
                                TimerFailCancel.Enabled = false;
                                TimerFailFail.Enabled = false;
                            }
                        }
                        break;

                    //EL CASE 4 AL 7 SON CASOS EN LOS QUE EL TECNICO O ING ENCIENDE DE MANERA
                    //MANUAL LAS LAMPARAS DESDE EL PROGRAMA T7 DE LA TESTER

                    case 4: //LAMPARA SWITCH Y PASS
                        if (Switch > 1 & Pass > 1)
                        {
                            //NO HAY FALLA
                            TimerSwitchCancel.Enabled = false;
                            TimerPassCancel.Enabled = false;
                            TimerSwitchFail.Enabled = false;
                            TimerPassFail.Enabled = false;
                        }
                        if (Switch < 1 & Pass < 1)
                        {
                            //FALLA
                            TimerSwitchCancel.Enabled = true;
                            TimerSwitchFail.Enabled = true;
                            TimerPassCancel.Enabled = true;
                            TimerPassFail.Enabled = true;

                            if (SwitchCount >= 5100)
                            {
                                TimerSwitchCancel.Enabled = false;
                                TimerSwitchFail.Enabled = false;
                            }
                            if (PassCount >= 5100)
                            {
                                TimerPassFail.Enabled = false;
                                TimerPassCancel.Enabled = false;
                            }
                        }
                        break;


                    //CASE 5
                    case 5: //LAMPARA SWITCH Y FAIL
                        if (Switch > 1 & Fail > 1)
                        {
                            //NO HAY FALLA
                            TimerSwitchCancel.Enabled = false;
                            TimerFailCancel.Enabled = false;
                            TimerSwitchFail.Enabled = false;
                            TimerFailFail.Enabled = false;
                        }
                        if (Switch < 1 & Fail < 1)
                        {
                            //FALLA
                            TimerSwitchCancel.Enabled = true;
                            TimerSwitchFail.Enabled = true;
                            TimerFailCancel.Enabled = true;
                            TimerFailFail.Enabled = true;

                            if (SwitchCount >= 5100)
                            {
                                TimerSwitchCancel.Enabled = false;
                                TimerSwitchFail.Enabled = false;
                            }
                            if (FailCount >= 5100)
                            {
                                TimerFailFail.Enabled = false;
                                TimerFailCancel.Enabled = false;
                            }
                        }
                        break;

                    //CASE 6
                    case 6: //LAMPARA PASS Y FAIL
                        if (Pass > 1 & Fail > 1)
                        {
                            //NO HAY FALLA
                            TimerPassCancel.Enabled = false;
                            TimerFailCancel.Enabled = false;
                            TimerPassFail.Enabled = false;
                            TimerFailFail.Enabled = false;
                        }
                        if (Pass < 1 & Fail < 1)
                        {
                            //FALLA
                            TimerPassCancel.Enabled = true;
                            TimerPassFail.Enabled = true;
                            TimerFailCancel.Enabled = true;
                            TimerFailFail.Enabled = true;

                            if (PassCount >= 5100)
                            {
                                TimerPassCancel.Enabled = false;
                                TimerPassFail.Enabled = false;
                            }
                            if (FailCount >= 5100)
                            {
                                TimerFailFail.Enabled = false;
                                TimerFailCancel.Enabled = false;
                            }
                        }
                        break;

                    //CASE CUANDO TODO ESTA ENCENDIDO
                    case 7: //LAMPARA PASS Y FAIL
                        if (Pass > 1 & Fail > 1 & Switch > 1)
                        {
                            //NO HAY FALLA
                            TimerPassCancel.Enabled = false;
                            TimerFailCancel.Enabled = false;
                            TimerPassFail.Enabled = false;
                            TimerFailFail.Enabled = false;
                            TimerSwitchCancel.Enabled = false;
                            TimerSwitchFail.Enabled = false;

                            if (SwitchCount >= 5100 || PassCount >= 5100 || FailCount >= 5100)
                            {
                                TimerReporte.Enabled = true;
                                SwitchCount = 0;
                                PassCount = 0;
                                FailCount = 0;
                            }

                        }
                        if (Pass < 1 & Fail < 1 & Switch < 1)
                        {
                            //FALLA
                            TimerPassCancel.Enabled = true;
                            TimerPassFail.Enabled = true;
                            TimerFailCancel.Enabled = true;
                            TimerFailFail.Enabled = true;
                            TimerSwitchCancel.Enabled = true;
                            TimerSwitchFail.Enabled = true;

                            if (PassCount >= 5100)
                            {
                                TimerPassCancel.Enabled = false;
                                TimerPassFail.Enabled = false;
                            }
                            if (FailCount >= 5100)
                            {
                                TimerFailFail.Enabled = false;
                                TimerFailCancel.Enabled = false;
                            }
                            if (SwitchCount >= 5100)
                            {
                                TimerSwitchFail.Enabled = false;
                                TimerSwitchCancel.Enabled = false;
                            }
                        }
                        break;

                    default:
                        //no pasa nada
                        break;
                }
                    
            }
            catch (Exception Error)
            {
                ErrorPort = "Error: " + Error.Message;
                return;
            }

        }


        private void TimerFailFail_Tick_1(object sender, EventArgs e)
        {
            //ENVIA CORREO DE LAMPARA FAIL
            string Error = "";
            StringBuilder MensajeBuilder = new StringBuilder();
            MensajeBuilder.Append("Falla en lampara Fail, celda 16".Trim());
            EnviarCorreo(MensajeBuilder, DateTime.Now, txtDe.Trim(), txtPara.Trim(), txtAsunto.Trim(), out Error);
        }
        private void TimerSwitchFail_Tick(object sender, EventArgs e)
        {
            //ENVIA CORREO DE LAMPARA SWITCH
            string Error = "";
            StringBuilder MensajeBuilder = new StringBuilder();
            MensajeBuilder.Append("Falla en lampara Switch, celda 16".Trim());
            EnviarCorreo(MensajeBuilder, DateTime.Now, txtDe.Trim(), txtPara.Trim(), txtAsunto.Trim(), out Error);
        }

        private void TimerPassFail_Tick(object sender, EventArgs e)
        {
            //ENVIA CORREO DE LAMPARA PASS
            string Error = "";
            StringBuilder MensajeBuilder = new StringBuilder();
            MensajeBuilder.Append("Falla en lampara Pass, celda 16".Trim());
            EnviarCorreo(MensajeBuilder, DateTime.Now, txtDe.Trim(), txtPara.Trim(), txtAsunto.Trim(), out Error);
        }

        private void Boton2_Click(object sender, EventArgs e)
        {
            Inicio_de_sesión.Form1 p2 = new Inicio_de_sesión.Form1();
            p2.Show();
        }

        private void BotonExit_Click(object sender, EventArgs e)
        {
            //declaracion de variables
            DialogResult resultado;      //variable para almacenar el valor regresado por messagebox

            resultado = MessageBox.Show("¿Estás seguro que deseas salir?", "¿SALIR?", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

            if (resultado == DialogResult.OK)   //verifica si se presionó el boton OK
                this.Close();                   //cierra el forms1 (this)
        }

    }
}